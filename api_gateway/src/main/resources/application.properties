# ===================================================================
# SERVER CONFIGURATION
# ===================================================================
server.port=8000
server.forward-headers-strategy=framework

# ===================================================================
# SPRING APPLICATION CONFIGURATION
# ===================================================================
spring.application.name=api-gateway

# ===================================================================
# DATABASE (DataSource) CONFIGURATION
# ===================================================================
spring.datasource.url=jdbc:sqlite:C:/sqlite3/ets_api.db
spring.datasource.driver-class-name=org.sqlite.JDBC

# ===================================================================
# JPA & HIBERNATE CONFIGURATION
# ===================================================================
# 애플리케이션 실행 시 엔티티와 테이블이 일치하는지 검증만 하고, 스키마는 변경하지 않음
spring.jpa.hibernate.ddl-auto=validate
# SQLite DB 방언(Dialect) 설정
spring.jpa.database-platform=org.sqlite.hibernate.dialect.SQLiteDialect
# 실행되는 JPA 쿼리를 로그로 출력
spring.jpa.show-sql=true

# ===================================================================
# HikariCP Connection Pool Settings for SQLite
# ===================================================================
# 최대 커넥션 풀 크기를 1로 설정하여 SQLite의 파일 락 충돌을 방지합니다.
spring.datasource.hikari.maximum-pool-size=1

# (선택) 기타 일반적인 HikariCP 설정
# 커넥션을 얻기 위해 대기하는 최대 시간 (30초)
spring.datasource.hikari.connection-timeout=30000
# 유휴 커넥션을 풀에서 제거하기까지 대기하는 시간 (10분)
spring.datasource.hikari.idle-timeout=600000
# 커넥션의 최대 생존 시간 (30분)
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# SPRING CLOUD GATEWAY CONFIGURATION
# ===================================================================
# WebFlux가 정적 리소스를 /static/** 경로에서만 찾도록 제한하여 API 경로와 충돌 방지
spring.webflux.static-path-pattern=/static/**

# 모든 경로(/**)의 요청을 처리할 기본 라우트 정의
spring.cloud.gateway.routes[0].id=dynamic_route
spring.cloud.gateway.routes[0].predicates[0]=Path=/**
# 최종 URI는 필터에서 동적으로 결정됨. 절대 호출되지 않는 placeholder 사용(RFC 2606 reserved TLD)
spring.cloud.gateway.routes[0].uri=http://example.invalid
# 임시 URI가 외부에 노출되지 않도록 Host 헤더 제거
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Host

# 서비스 디스커버리 비활성화 (lb:// 사용 안 함)
spring.cloud.gateway.discovery.locator.enabled=false

# ---- Gateway HttpClient 세부 설정 (프록시/타임아웃) ----
# 시스템(운영체제/브라우저) 프록시 사용 금지
spring.cloud.gateway.httpclient.proxy.use-system-properties=false
# 연결/응답 타임아웃 보강
spring.cloud.gateway.httpclient.connect-timeout=10000
spring.cloud.gateway.httpclient.response-timeout=120s

# ===================================================================
# CUSTOM APPLICATION CONFIGURATION
# ===================================================================
app.api.salt=ets-ai-secret-api-salt

# ===================================================================
# LOGGING (진단 시 유용, 필요 없으면 INFO로 낮추세요)
# ===================================================================
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.reactor.netty.http.client=DEBUG

# --- 리액티브 디코더 메모리 상한(요청/응답 바디 join 보호) ---
# 트래픽 특성에 맞게 1~8MB 권장
spring.codec.max-in-memory-size=2MB   

# --- Netty HttpClient 커넥션 풀 튜닝 ---
spring.cloud.gateway.httpclient.pool.type=ELASTIC
spring.cloud.gateway.httpclient.pool.max-connections=500
spring.cloud.gateway.httpclient.pool.acquire-timeout=2000

# --- CORS 전역 설정 ---
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-origins=https://example.com
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-headers=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allow-credentials=true
spring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping=true